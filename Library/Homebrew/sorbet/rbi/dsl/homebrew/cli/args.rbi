# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Homebrew::CLI::Args`.
# Please instead update this file by running `bin/tapioca dsl Homebrew::CLI::Args`.

class Homebrew::CLI::Args
  sig { returns(T::Boolean) }
  def D?; end

  sig { returns(T::Boolean) }
  def HEAD?; end

  sig { returns(T.nilable(T::Array[String])) }
  def add_groups; end

  sig { returns(T::Boolean) }
  def adopt?; end

  sig { returns(T::Boolean) }
  def aliases?; end

  sig { returns(T::Boolean) }
  def all_supported?; end

  sig { returns(T::Boolean) }
  def analytics?; end

  sig { returns(T::Boolean) }
  def annotate?; end

  sig { returns(T.nilable(String)) }
  def appdir; end

  sig { returns(T.nilable(String)) }
  def arch; end

  sig { returns(T::Boolean) }
  def archlinux?; end

  sig { returns(T.nilable(String)) }
  def artifact; end

  sig { returns(T.nilable(String)) }
  def audio_unit_plugindir; end

  sig { returns(T::Boolean) }
  def audit_debug?; end

  sig { returns(T::Boolean) }
  def auto_update?; end

  sig { returns(T::Boolean) }
  def autosquash?; end

  sig { returns(T::Boolean) }
  def autotools?; end

  sig { returns(T.nilable(String)) }
  def before; end

  sig { returns(T::Boolean) }
  def binaries?; end

  sig { returns(T.nilable(String)) }
  def bottle_arch; end

  sig { returns(T.nilable(String)) }
  def bottle_tag; end

  sig { returns(T.nilable(String)) }
  def branch; end

  sig { returns(T::Boolean) }
  def branch_okay?; end

  sig { returns(T::Boolean) }
  def build_bottle?; end

  sig { returns(T::Boolean) }
  def build_from_source?; end

  sig { returns(T::Boolean) }
  def byebug?; end

  sig { returns(T.nilable(String)) }
  def c; end

  sig { returns(T::Boolean) }
  def cached?; end

  sig { returns(T::Boolean) }
  def cask?; end

  sig { returns(T::Boolean) }
  def casks?; end

  sig { returns(T.nilable(String)) }
  def category; end

  sig { returns(T.nilable(String)) }
  def cc; end

  sig { returns(T::Boolean) }
  def changed?; end

  sig { returns(T::Boolean) }
  def clean?; end

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T::Boolean) }
  def cmake?; end

  sig { returns(T.nilable(String)) }
  def cmd; end

  sig { returns(T.nilable(String)) }
  def colorpickerdir; end

  sig { returns(T.nilable(String)) }
  def command; end

  sig { returns(T.nilable(String)) }
  def commit; end

  sig { returns(T.nilable(String)) }
  def committer; end

  sig { returns(T::Boolean) }
  def compact?; end

  sig { returns(T::Boolean) }
  def coverage?; end

  sig { returns(T::Boolean) }
  def crystal?; end

  sig { returns(T::Boolean) }
  def custom_remote?; end

  sig { returns(T.nilable(String)) }
  def days; end

  sig { returns(T::Boolean) }
  def debian?; end

  sig { returns(T::Boolean) }
  def debug_symbols?; end

  sig { returns(T::Boolean) }
  def declared?; end

  sig { returns(T::Boolean) }
  def dependents?; end

  sig { returns(T::Boolean) }
  def deps?; end

  sig { returns(T::Boolean) }
  def desc?; end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(T.nilable(String)) }
  def destdir; end

  sig { returns(T.nilable(String)) }
  def dictionarydir; end

  sig { returns(T.nilable(String)) }
  def dir; end

  sig { returns(T::Boolean) }
  def direct?; end

  sig { returns(T::Boolean) }
  def display_cop_names?; end

  sig { returns(T::Boolean) }
  def display_times?; end

  sig { returns(T::Boolean) }
  def dot?; end

  sig { returns(T::Boolean) }
  def dry_run?; end

  sig { returns(T.nilable(String)) }
  def e; end

  sig { returns(T.nilable(String)) }
  def env; end

  sig { returns(T::Boolean) }
  def eval_all?; end

  sig { returns(T::Boolean) }
  def examples?; end

  sig { returns(T.nilable(T::Array[String])) }
  def except_cops; end

  sig { returns(T.nilable(T::Array[String])) }
  def exclude_packages; end

  sig { returns(T.nilable(T::Array[String])) }
  def extra_packages; end

  sig { returns(T::Boolean) }
  def extract_plist?; end

  sig { returns(T::Boolean) }
  def f?; end

  sig { returns(T::Boolean) }
  def fail_fast?; end

  sig { returns(T::Boolean) }
  def fedora?; end

  sig { returns(T::Boolean) }
  def fetch_HEAD?; end

  sig { returns(T.nilable(String)) }
  def file; end

  sig { returns(T::Boolean) }
  def fink?; end

  sig { returns(T::Boolean) }
  def fix?; end

  sig { returns(T.nilable(String)) }
  def fontdir; end

  sig { returns(T::Boolean) }
  def for_each?; end

  sig { returns(T::Boolean) }
  def force?; end

  sig { returns(T.nilable(String)) }
  def force_auto_update?; end

  sig { returns(T::Boolean) }
  def force_bottle?; end

  sig { returns(T::Boolean) }
  def formula?; end

  sig { returns(T::Boolean) }
  def formulae?; end

  sig { returns(T::Boolean) }
  def full_name?; end

  sig { returns(T::Boolean) }
  def g?; end

  sig { returns(T::Boolean) }
  def generic?; end

  sig { returns(T::Boolean) }
  def git?; end

  sig { returns(T::Boolean) }
  def github?; end

  sig { returns(T::Boolean) }
  def github_packages?; end

  sig { returns(T::Boolean) }
  def github_packages_downloads?; end

  sig { returns(T::Boolean) }
  def go?; end

  sig { returns(T::Boolean) }
  def graph?; end

  sig { returns(T::Boolean) }
  def greedy?; end

  sig { returns(T::Boolean) }
  def greedy_auto_updates?; end

  sig { returns(T::Boolean) }
  def greedy_latest?; end

  sig { returns(T.nilable(T::Array[String])) }
  def groups; end

  sig { returns(T.nilable(T::Array[String])) }
  def hide; end

  sig { returns(T::Boolean) }
  def i?; end

  sig { returns(T.nilable(String)) }
  def ignore; end

  sig { returns(T::Boolean) }
  def ignore_dependencies?; end

  sig { returns(T::Boolean) }
  def ignore_failures?; end

  sig { returns(T.nilable(T::Array[String])) }
  def ignore_missing_artifacts; end

  sig { returns(T::Boolean) }
  def ignore_non_pypi_packages?; end

  sig { returns(T::Boolean) }
  def ignore_pinned?; end

  sig { returns(T::Boolean) }
  def include_aliases?; end

  sig { returns(T::Boolean) }
  def include_build?; end

  sig { returns(T::Boolean) }
  def include_optional?; end

  sig { returns(T::Boolean) }
  def include_requirements?; end

  sig { returns(T::Boolean) }
  def include_test?; end

  sig { returns(T.nilable(String)) }
  def input_methoddir; end

  sig { returns(T::Boolean) }
  def install_dependencies?; end

  sig { returns(T::Boolean) }
  def installed?; end

  sig { returns(T::Boolean) }
  def installed_as_dependency?; end

  sig { returns(T::Boolean) }
  def installed_on_request?; end

  sig { returns(T::Boolean) }
  def interactive?; end

  sig { returns(T.nilable(String)) }
  def internet_plugindir; end

  sig { returns(T.nilable(String)) }
  def issue; end

  sig { returns(T.nilable(String)) }
  def json; end

  sig { returns(T::Boolean) }
  def json?; end

  sig { returns(T::Boolean) }
  def keep_old?; end

  sig { returns(T::Boolean) }
  def keep_tmp?; end

  sig { returns(T.nilable(String)) }
  def keyboard_layoutdir; end

  sig { returns(T.nilable(T::Array[String])) }
  def language; end

  sig { returns(T::Boolean) }
  def large_runner?; end

  sig { returns(T::Boolean) }
  def linux?; end

  sig { returns(T::Boolean) }
  def linux_self_hosted?; end

  sig { returns(T::Boolean) }
  def linux_wheezy?; end

  sig { returns(T::Boolean) }
  def list_checks?; end

  sig { returns(T::Boolean) }
  def lost?; end

  sig { returns(T.nilable(T::Array[String])) }
  def macos; end

  sig { returns(T::Boolean) }
  def macports?; end

  sig { returns(T::Boolean) }
  def major?; end

  sig { returns(T.nilable(String)) }
  def max_count; end

  sig { returns(T.nilable(String)) }
  def mdimporterdir; end

  sig { returns(T::Boolean) }
  def meson?; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T::Boolean) }
  def minor?; end

  sig { returns(T::Boolean) }
  def missing?; end

  sig { returns(T.nilable(String)) }
  def n; end

  sig { returns(T::Boolean) }
  def n?; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T::Boolean) }
  def new_issue?; end

  sig { returns(T::Boolean) }
  def newer_only?; end

  sig { returns(T::Boolean) }
  def no_cherry_pick?; end

  sig { returns(T::Boolean) }
  def no_commit?; end

  sig { returns(T::Boolean) }
  def no_fetch?; end

  sig { returns(T::Boolean) }
  def no_git?; end

  sig { returns(T::Boolean) }
  def no_simulate?; end

  sig { returns(T::Boolean) }
  def no_upload?; end

  sig { returns(T::Boolean) }
  def node?; end

  sig { returns(T::Boolean) }
  def non_bundler_gems?; end

  sig { returns(T::Boolean) }
  def oneline?; end

  sig { returns(T::Boolean) }
  def online?; end

  sig { returns(T.nilable(String)) }
  def only; end

  sig { returns(T.nilable(T::Array[String])) }
  def only_cops; end

  sig { returns(T::Boolean) }
  def only_dependencies?; end

  sig { returns(T::Boolean) }
  def open?; end

  sig { returns(T::Boolean) }
  def opensuse?; end

  sig { returns(T.nilable(String)) }
  def os; end

  sig { returns(T::Boolean) }
  def overwrite?; end

  sig { returns(T::Boolean) }
  def p?; end

  sig { returns(T.nilable(String)) }
  def package_name; end

  sig { returns(T::Boolean) }
  def patch?; end

  sig { returns(T::Boolean) }
  def perl?; end

  sig { returns(T::Boolean) }
  def plain?; end

  sig { returns(T.nilable(String)) }
  def prefpanedir; end

  sig { returns(T::Boolean) }
  def preinstall?; end

  sig { returns(T::Boolean) }
  def print_only?; end

  sig { returns(T::Boolean) }
  def print_path?; end

  sig { returns(T::Boolean) }
  def private?; end

  sig { returns(T.nilable(String)) }
  def profile; end

  sig { returns(T.nilable(String)) }
  def prune; end

  sig { returns(T::Boolean) }
  def prune_prefix?; end

  sig { returns(T::Boolean) }
  def pry?; end

  sig { returns(T::Boolean) }
  def publish?; end

  sig { returns(T.nilable(String)) }
  def pull_label; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(T::Boolean) }
  def python?; end

  sig { returns(T.nilable(String)) }
  def qlplugindir; end

  sig { returns(T::Boolean) }
  def quarantine?; end

  sig { returns(T.nilable(String)) }
  def r; end

  sig { returns(T::Boolean) }
  def r?; end

  sig { returns(T::Boolean) }
  def recursive?; end

  sig { returns(T::Boolean) }
  def repair?; end

  sig { returns(T::Boolean) }
  def repology?; end

  sig { returns(T::Boolean) }
  def require_sha?; end

  sig { returns(T::Boolean) }
  def reset_cache?; end

  sig { returns(T::Boolean) }
  def resolve?; end

  sig { returns(T::Boolean) }
  def resources?; end

  sig { returns(T::Boolean) }
  def retain_bottle_dir?; end

  sig { returns(T::Boolean) }
  def retry?; end

  sig { returns(T::Boolean) }
  def reverse?; end

  sig { returns(T.nilable(String)) }
  def root_url; end

  sig { returns(T.nilable(String)) }
  def root_url_using; end

  sig { returns(T::Boolean) }
  def ruby?; end

  sig { returns(T::Boolean) }
  def rust?; end

  sig { returns(T::Boolean) }
  def s?; end

  sig { returns(T.nilable(String)) }
  def screen_saverdir; end

  sig { returns(T::Boolean) }
  def search?; end

  sig { returns(T.nilable(String)) }
  def seed; end

  sig { returns(T.nilable(String)) }
  def servicedir; end

  sig { returns(T.nilable(String)) }
  def set_license; end

  sig { returns(T.nilable(String)) }
  def set_name; end

  sig { returns(T.nilable(String)) }
  def set_version; end

  sig { returns(T.nilable(String)) }
  def shell; end

  sig { returns(T::Boolean) }
  def silent?; end

  sig { returns(T::Boolean) }
  def skip_cask_deps?; end

  sig { returns(T::Boolean) }
  def skip_post_install?; end

  sig { returns(T::Boolean) }
  def skip_recommended?; end

  sig { returns(T::Boolean) }
  def stat?; end

  sig { returns(T::Boolean) }
  def strict?; end

  sig { returns(T::Boolean) }
  def suggest_typed?; end

  sig { returns(T::Boolean) }
  def syntax?; end

  sig { returns(T.nilable(String)) }
  def tag; end

  sig { returns(T.nilable(String)) }
  def tap; end

  sig { returns(T::Boolean) }
  def test?; end

  sig { returns(T.nilable(String)) }
  def timeout; end

  sig { returns(T::Boolean) }
  def to_tag?; end

  sig { returns(T::Boolean) }
  def topological?; end

  sig { returns(T::Boolean) }
  def total?; end

  sig { returns(T::Boolean) }
  def tree?; end

  sig { returns(T::Boolean) }
  def u?; end

  sig { returns(T::Boolean) }
  def ubuntu?; end

  sig { returns(T::Boolean) }
  def unbrewed?; end

  sig { returns(T::Boolean) }
  def union?; end

  sig { returns(T.nilable(T::Array[String])) }
  def update; end

  sig { returns(T::Boolean) }
  def update?; end

  sig { returns(T::Boolean) }
  def update_all?; end

  sig { returns(T::Boolean) }
  def upload?; end

  sig { returns(T::Boolean) }
  def upload_only?; end

  sig { returns(T::Boolean) }
  def variations?; end

  sig { returns(T.nilable(String)) }
  def version; end

  sig { returns(T.nilable(String)) }
  def vst3_plugindir; end

  sig { returns(T.nilable(String)) }
  def vst_plugindir; end

  sig { returns(T::Boolean) }
  def warn_on_upload_failure?; end

  sig { returns(T::Boolean) }
  def with_hostname?; end

  sig { returns(T.nilable(String)) }
  def with_label; end

  sig { returns(T::Boolean) }
  def without_approval?; end

  sig { returns(T.nilable(T::Array[String])) }
  def without_labels; end

  sig { returns(T.nilable(String)) }
  def workflow; end

  sig { returns(T.nilable(T::Array[String])) }
  def workflows; end

  sig { returns(T::Boolean) }
  def zap?; end
end
