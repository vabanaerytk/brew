#!/usr/bin/ruby
# -*- coding: utf-8 -*-

# Many Pathname operations use getwd when they shouldn't, and then throw 
# odd exceptions. Reduce our support burden by showing a user-friendly error.
Dir.getwd rescue abort "The current working directory doesn't exist, cannot proceed."

BREW_FILE = __FILE__

def homebrew_rubylib_path
  lib_path = "/../../Library/Homebrew"

  # Library/Homebrew is relative to the real path of brew
  brew_path = __FILE__
  brew_path = File.readlink(brew_path) if File.symlink? brew_path
  return File.expand_path(brew_path+lib_path)
end

$:.unshift homebrew_rubylib_path
require 'global'

case ARGV.first
when '--cache'
  puts HOMEBREW_CACHE
  exit 0
when '-h', '--help', '--usage', '-?', nil
  puts ARGV.usage
  exit 0
when '--version'
  puts HOMEBREW_VERSION
  exit 0
when '-v'
  if ARGV.length > 1
    puts "Homebrew #{HOMEBREW_VERSION}"
    # continue in verbose mode
    ARGV << ARGV.shift
  else
    puts HOMEBREW_VERSION
    exit 0
  end
end

case HOMEBREW_PREFIX.to_s when '/', '/usr'
  # it may work, but I only see pain this route and don't want to support it
  abort "Cowardly refusing to continue at this prefix: #{HOMEBREW_PREFIX}"
end
if MACOS_VERSION < 10.5
  abort "Homebrew requires Leopard or higher, but you could fork it and fix that..."
end

def dump_config
  puts <<-EOS
HOMEBREW_VERSION:    #{HOMEBREW_VERSION}

HOMEBREW_PREFIX:     #{HOMEBREW_PREFIX}
\tWhere do we symlink installs to?

HOMEBREW_CELLAR:     #{HOMEBREW_CELLAR}
\tWhere do we store our built products?

HOMEBREW_CACHE:      #{HOMEBREW_CACHE}
\tWhere do we cache our downloads?

HOMEBREW_REPOSITORY: #{HOMEBREW_REPOSITORY}
\tWhere is our .git?

library path:        #{homebrew_rubylib_path}
\tWhat do we put on the ruby path?
EOS
end


begin
  require 'brew.h'

  case arg = ARGV.shift
  when '--prefix'
    puts HOMEBREW_PREFIX
  when '--config'
    dump_config

    when 'home', 'homepage'
      if ARGV.named.empty?
        exec "open", HOMEBREW_WWW
      else
        exec "open", *ARGV.formulae.collect {|f| f.homepage}
      end

    when 'ls', 'list'
      if ARGV.flag? '--unbrewed'
        dirs = HOMEBREW_PREFIX.children.select { |pn| pn.directory? }.collect { |pn| pn.basename.to_s }
        dirs -= ['Library', 'Cellar', '.git']
        Dir.chdir HOMEBREW_PREFIX
        exec 'find', *dirs + %w[-type f ( ! -iname .ds_store ! -iname brew )]
      elsif ARGV.named.empty?
        ENV['CLICOLOR']=nil
        exec 'ls', *ARGV.options<<HOMEBREW_CELLAR if HOMEBREW_CELLAR.exist?
      elsif ARGV.verbose? or not $stdout.tty?
        exec "find", *ARGV.kegs+%w[-not -type d -print]
      else
        ARGV.kegs.each { |keg| PrettyListing.new keg }
      end

    when 'search', '-S'
      formulae = (HOMEBREW_REPOSITORY+'Library/Formula').children.sort.map{|f| f.basename('.rb') }
      if ARGV.first =~ /^\/(.*)\/$/
        puts_columns formulae.grep(Regexp.new($1))
      else
        puts_columns formulae.grep(/.*#{ARGV.first}.*/)
      end

    when 'edit'
      if ARGV.named.empty?
        # EDITOR isn't a good fit here, we need a GUI client that actually has
        # a UI for projects, so apologies if this wasn't what you expected,
        # please improve it! :)
        exec 'mate', *Dir["#{HOMEBREW_REPOSITORY}/Library/*"]<<
                          "#{HOMEBREW_REPOSITORY}/bin/brew"<<
                          "#{HOMEBREW_REPOSITORY}/README.md"
      else
        exec_editor *ARGV.formulae.collect {|f| f.path}
      end

    when 'up', 'update'
      require 'update'
      updater = RefreshBrew.new
      old_revision = updater.current_revision
      unless updater.update_from_masterbrew!
        puts "Already up-to-date."
      else
        puts "Updated Homebrew from #{old_revision[0,8]} to #{updater.current_revision[0,8]}."
        if updater.pending_formulae_changes?
          ohai "The following formulae were updated:"
          puts_columns updater.updated_formulae
        else
          puts "No formulae were updated." unless updater.pending_formulae_changes?
        end
      end

    when 'ln', 'link'
      ARGV.kegs.each {|keg| puts "#{keg.link} links created for #{keg}"}

    when 'unlink'
      ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

    when 'rm', 'uninstall', 'remove'
      ARGV.kegs.each do |keg|
        puts "Uninstalling #{keg}..."
        keg.uninstall
        keg.unlink
      end

    when 'prune'
      prune

    # 'make' supported until 0.7 for historic reasons
    when 'mk', 'make'
      opoo "`brew make' has changed to `brew create'"
      puts "This is because make can be confused with the `make' tool."
      puts "brew make will continue working until Homebrew 0.7"
      exec __FILE__, "create", *ARGV

    when 'create'
      if ARGV.include? '--macports'
        exec "open", "http://www.macports.org/ports.php?by=name&substr=#{ARGV.next}"
      elsif ARGV.named.empty?
        raise UsageError
      else
        exec_editor *ARGV.named.collect {|name| make name}
      end

    when 'diy', 'configure'
      puts diy

    when 'info', 'abv'
      if ARGV.named.empty?
        puts `ls #{HOMEBREW_CELLAR} | wc -l`.strip+" kegs, "+HOMEBREW_CELLAR.abv
      elsif ARGV[0][0..6] == 'http://'
        puts Pathname.new(ARGV.shift).version
      else
        ARGV.named.each {|name| info name}
      end

  when 'install'
    require 'formula_installer'

    ############################################################ sanity checks
    case Hardware.cpu_type when :ppc, :dunno
      abort "Sorry, Homebrew does not support your computer's CPU architecture."
    end

    raise "Cannot write to #{HOMEBREW_CELLAR}" unless HOMEBREW_CELLAR.writable?
    raise "Cannot write to #{HOMEBREW_PREFIX}" unless HOMEBREW_PREFIX.writable?

    ################################################################# warnings
    if MACOS_VERSION >= 10.6
      `/Developer/usr/bin/llvm-gcc-4.2 -v 2>&1` =~ /LLVM build (\d{4,})/
      opoo "You should upgrade to Xcode 3.2.1" if $1.to_i < 2206
    end

    if macports_or_fink_installed?
      opoo "It appears you have Macports or Fink installed"
      puts "Although, unlikely, this can break builds or cause obscure runtime issues."
      puts "If you experience problems try uninstalling these tools."
    end

    ################################################################# install!
    installer = FormulaInstaller.new
    installer.install_deps = !ARGV.include?('--ignore-dependencies')

    ARGV.formulae.each do |f|
      if not f.installed? or ARGV.force?
        installer.install f
      else
        puts "Formula already installed: #{f.prefix}"
      end
    end

  when 'log'
    Dir.chdir HOMEBREW_REPOSITORY
    exec "git", "log", ARGV.formulae.first.path, *ARGV.options

  else
    onoe "Unknown command: #{arg}"
  end

rescue FormulaUnspecifiedError
  puts "This command requires a formula argument"
  exit 1
rescue KegUnspecifiedError
  puts "This command requires a keg argument"
  exit 1
rescue UsageError
  onoe "Invalid usage"
  puts ARGV.usage
  exit 1
rescue SystemExit
  puts "Kernel.exit" if ARGV.verbose?
  exit 1
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue SystemCallError, RuntimeError => e
  if ARGV.debug?
    onoe e.inspect
    puts e.backtrace
  else
    onoe e
  end
  exit 1
rescue Exception => e
  onoe "Homebrew has failed you :("
  puts "Please report this bug at: #{HOMEBREW_WWW}"
  puts "Please include the following information:"
  ohai "Environment"
  puts "Mac OS X #{MACOS_VERSION}"
  puts "Macports or Fink? #{macports_or_fink_installed?}"
  ohai e.inspect
  puts e.backtrace
  exit 1
end
