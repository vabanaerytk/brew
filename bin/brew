#!/usr/bin/ruby
$:.unshift ENV['RUBYLIB']=File.expand_path(__FILE__+'/../../Library/Homebrew')

require 'pathname+yeast'
require 'ARGV+yeast'
require 'utils'
require 'brew.h'

if Process.uid == 0
  # technically this is not the correct place, this cache is for *all users*
  # so in that case, maybe we should always use it, root or not?
  HOMEBREW_CACHE=Pathname.new("/Library/Caches/Homebrew")
else
  HOMEBREW_CACHE=Pathname.new("~/Library/Caches/Homebrew").expand_path
end

HOMEBREW_PREFIX=Pathname.new(__FILE__).dirname.parent.cleanpath
HOMEBREW_CELLAR=HOMEBREW_PREFIX+'Cellar'
HOMEBREW_VERSION='0.4'
HOMEBREW_WWW='http://bit.ly/Homebrew'
HOMEBREW_USER_AGENT="Homebrew #{HOMEBREW_VERSION} (Ruby #{VERSION}; Mac OS X 10.5 Leopard)"

if %w[/ /usr].include? HOMEBREW_PREFIX.to_s then abort <<-troba
You have placed Homebrew at the prefix: #{HOMEBREW_PREFIX}
This is not currently supported. Voice your support for this feature at:
#{HOMEBREW_WWW}
troba
end

if `sw_vers -productVersion` =~ /10\.(\d)\.(\d+)/ and $1.to_i < 5
  onoe "Homebrew requires Leopard or higher"
  abort "But thanks for your interest anyway!"
end

# Pathname often throws if CWD doesn't exist
Dir.chdir '/' unless File.directory? ENV['PWD']


begin
  case ARGV.shift
    when '--prefix' then puts HOMEBREW_PREFIX
    when '--cache' then puts HOMEBREW_CACHE
    when '-h', '--help', '--usage', '-?' then puts ARGV.usage
    when '-v', '--version' then puts HOMEBREW_VERSION

    when 'home', 'homepage'
      if ARGV.named_empty?
        exec "open", HOMEBREW_WWW
      else
        exec "open", *ARGV.formulae.collect {|f| f.homepage}
      end

    when 'ls', 'list'
      if ARGV.named_empty?
        ENV['CLICOLOR']=nil
        exec 'ls', *ARGV.options<<HOMEBREW_CELLAR
      else
        exec "find", *ARGV.kegs+%w[-not -type d -print]
      end

    when 'edit'
      if ARGV.named_empty?
        exec "mate", *Dir["#{HOMEBREW_PREFIX}/Library/*"]<<
                          "#{HOMEBREW_PREFIX}/bin/brew"<<
                          "#{HOMEBREW_PREFIX}/README"
      else
        exec "mate", *ARGV.formulae.collect {|f| f.path}
      end

    when 'install'
      if ARGV.named_empty?
        # TODO I tried to columnise it using the 'column' utility but it uses
        # tabs rather than spaces and the output looked wrong
        puts "Available formulae:"
        (HOMEBREW_PREFIX+'Library'+'Formula').children.each {|f| puts f.basename('.rb') }
        exit 0
      end
      
      # we need to ensure a pristine ENV for each process or the formula
      # will start with the ENV from the previous build
      ARGV.formulae.each do |f|
        pid=fork
        if pid.nil?
          exec __FILE__, "install-just-one", f.name, *ARGV.options
        else
          Process.wait pid
        end
        #FIXME I don't think $? represents the exit code from the child forkâ€¦
        exit! $? if $? != 0 # exception in other brew will be visible on screen
      end

    # this is an internal option, don't expose it to the user
    when 'install-just-one'
      require 'keg'
      f=ARGV.formulae.shift
      raise "#{f.name} is already installed" if f.installed? unless ARGV.force?
      BEGINNING=Time.now
      begin
        install f
        ohai "Caveats", f.caveats, ''
        ohai 'Finishing up'
        clean f
        raise "Nothing was installed to #{f.prefix}" unless f.installed?
        Keg.new(f.prefix).link
      rescue Exception
        f.prefix.rmtree if f.prefix.directory?
        raise
      end
      puts "#{f.prefix}: #{f.prefix.abv}, built in #{pretty_duration Time.now-BEGINNING}"

    when 'ln', 'link'
      ARGV.kegs.each {|keg| puts "#{keg.link} links created for #{keg}"}

    when 'unlink'
      ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

    when 'unlink'
      ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

    when 'rm', 'uninstall', 'remove'
      ARGV.kegs.each do |keg|
        puts "Uninstalling #{keg}..."
        keg.uninstall
      end
      prune

    when 'up', 'update'
      puts "Reserved command"

    when 'prune'
      prune

    when 'mk', 'make'
      if ARGV.include? '--macports'
        exec "open", "http://www.macports.org/ports.php?by=name&substr=#{ARGV.next}"
      else
        exec "mate", *ARGV.collect {|name| make name}
      end

    when 'diy', 'configure'
      puts diy

    when 'info', 'abv'
      if ARGV.named_empty?
        puts `ls #{HOMEBREW_CELLAR} | wc -l`.strip+" kegs, "+HOMEBREW_CELLAR.abv
      elsif ARGV[0][0..6] == 'http://'
        puts Pathname.new(ARGV.shift).version
      else
        ARGV.named.each {|name| info name}
      end

    else
      puts ARGV.usage
  end

rescue UsageError
  onoe "Invalid usage"
  puts ARGV.usage
rescue SystemExit
  ohai "Kernel.exit" if ARGV.verbose?
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue SystemCallError, RuntimeError => e
  if ARGV.debug?
    onoe e.inspect
    puts e.backtrace
  else
    onoe e
  end
  exit 1
rescue Exception => e
  onoe "Homebrew has failed you :("
  puts "Please report this bug at: #{HOMEBREW_WWW}"
  puts "Please include this backtrace:"
  ohai e.inspect
  puts e.backtrace
end
