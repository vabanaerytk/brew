#!/bin/bash

chdir() {
  cd "$@" >/dev/null || {
    echo "Error: failed to cd to " "$@" "!" >&2
    exit 1
  }
}

# Force UTF-8 to avoid encoding issues for users with broken locale settings.
if [ "$(locale charmap 2> /dev/null)" != "UTF-8" ]
then
  export LC_ALL="en_US.UTF-8"
fi

BREW_FILE_DIRECTORY="$(chdir "${0%/*}" && pwd -P)"
HOMEBREW_BREW_FILE="$BREW_FILE_DIRECTORY/${0##*/}"

if [ -L "$HOMEBREW_BREW_FILE" ]
then
  BREW_SYMLINK="$(readlink "$HOMEBREW_BREW_FILE")"
  BREW_SYMLINK_DIRECTORY="$(dirname "$BREW_SYMLINK")"
  BREW_FILE_DIRECTORY="$(chdir "$BREW_FILE_DIRECTORY" &&
                         chdir "$BREW_SYMLINK_DIRECTORY" && pwd -P)"
fi

HOMEBREW_PREFIX="$(chdir "$(dirname "$(dirname "$HOMEBREW_BREW_FILE")")" && pwd -P)"
HOMEBREW_REPOSITORY="$(chdir "$BREW_FILE_DIRECTORY"/../ && pwd -P)"
HOMEBREW_LIBRARY="$(chdir "$BREW_FILE_DIRECTORY"/../Library && pwd -P)"

# Where we store built products; /usr/local/Cellar if it exists,
# otherwise a Cellar relative to the Repository.
if [ -d "$HOMEBREW_PREFIX/Cellar" ]
then
  HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
else
  HOMEBREW_CELLAR="$HOMEBREW_REPOSITORY/Cellar"
fi

# Users may have these set, pointing the system Ruby
# at non-system gem paths
unset GEM_HOME
unset GEM_PATH

if [ -z "$HOMEBREW_DEVELOPER" ]
then
  unset HOMEBREW_RUBY_PATH
fi

if [ -z "$HOMEBREW_RUBY_PATH" ]
then
  if [ "$(uname -s)" = "Darwin" ]
  then
    HOMEBREW_RUBY_PATH="/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby"
  else
    HOMEBREW_RUBY_PATH="$(which ruby)"
  fi
fi

export HOMEBREW_BREW_FILE
export HOMEBREW_RUBY_PATH
export HOMEBREW_PREFIX
export HOMEBREW_REPOSITORY
export HOMEBREW_LIBRARY
export HOMEBREW_CELLAR

for i in "$@"
do
  if [[ "$1" = -v ]]
  then
    shift
    set -- "$@" -v
  fi
  [[ "$i" =~ ^- ]] && continue
  HOMEBREW_BASH_COMMAND="$HOMEBREW_LIBRARY/Homebrew/cmd/$i.sh"
  break
done

if [ -n "$HOMEBREW_BASH_COMMAND" ] && [ -x "$HOMEBREW_BASH_COMMAND" ]
then
  # source rather than executing directly to ensure the entire file is read into
  # memory before it is run. This makes running a Bash script behave more like
  # a Ruby script and avoids hard-to-debug issues if the Bash script is updated
  # at the same time as being run.
  #
  # Hide shellcheck complaint:
  # shellcheck source=/dev/null
  source "$HOMEBREW_BASH_COMMAND"
  "$HOMEBREW_COMMAND" "$@"
  exit $?
else
  exec "$HOMEBREW_RUBY_PATH" -W0 "$HOMEBREW_LIBRARY/brew.rb" "$@"
fi
